#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FalkorDB –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Neuro-Sachok
"""

import redis
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
FALKORDB_HOST = 'zwo4o088ookkc0w4csosgwk4.147.93.72.109.sslip.io'
FALKORDB_PORT = 6379
FALKORDB_PASSWORD = None  # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å

def test_connection():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    try:
        r = redis.Redis(
            host=FALKORDB_HOST,
            port=FALKORDB_PORT,
            password=FALKORDB_PASSWORD,
            decode_responses=True
        )
        result = r.ping()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {result}")
        return r
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def test_basic_operations(r):
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞
    query = """
    CREATE (n:IdeaCard {
        id: 'test_001',
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∏–¥–µ—è',
        content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–¥–µ—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ FalkorDB',
        timestamp: timestamp(),
        tags: ['test', 'falkordb', 'neuro-sachok']
    })
    RETURN n
    """
    
    try:
        result = r.execute_command('GRAPH.QUERY', 'GLOBAL', query)
        print(f"‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞: {e}")

def test_semantic_links(r):
    """–¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–¥–µ–π
    query = """
    CREATE (idea1:IdeaCard {
        id: 'idea_001',
        title: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        content: 'AI - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –±—É–¥—É—â–µ–≥–æ',
        tags: ['ai', 'technology', 'future']
    })
    CREATE (idea2:IdeaCard {
        id: 'idea_002', 
        title: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
        content: 'ML - –ø–æ–¥—Ä–∞–∑–¥–µ–ª AI',
        tags: ['ml', 'ai', 'algorithms']
    })
    CREATE (idea1)-[:SEMANTIC_LINK {
        type: 'RELATED',
        strength: 0.9,
        created_at: timestamp()
    }]->(idea2)
    RETURN idea1, idea2
    """
    
    try:
        result = r.execute_command('GRAPH.QUERY', 'GLOBAL', query)
        print(f"‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω—ã: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π: {e}")

def test_search_operations(r):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
    query = """
    MATCH (n:IdeaCard)
    WHERE 'ai' IN n.tags
    RETURN n.title, n.tags
    """
    
    try:
        result = r.execute_command('GRAPH.QUERY', 'GLOBAL', query)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def test_graph_statistics(r):
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∞"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∞...")
    
    queries = [
        "CALL db.labels()",
        "CALL db.relationshipTypes()", 
        "MATCH (n) RETURN count(n) as node_count",
        "MATCH ()-[r]->() RETURN count(r) as relationship_count"
    ]
    
    for query in queries:
        try:
            result = r.execute_command('GRAPH.QUERY', 'GLOBAL', query)
            print(f"‚úÖ {query}: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ '{query}': {e}")

def cleanup_test_data(r):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    query = "MATCH (n) DETACH DELETE n"
    
    try:
        result = r.execute_command('GRAPH.QUERY', 'GLOBAL', query)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FalkorDB –¥–ª—è Neuro-Sachok")
    print("=" * 50)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    r = test_connection()
    if not r:
        return
    
    # –¢–µ—Å—Ç—ã
    test_basic_operations(r)
    test_semantic_links(r)
    test_search_operations(r)
    test_graph_statistics(r)
    
    # –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    cleanup_test_data(r)
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
